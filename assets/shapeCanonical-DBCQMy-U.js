function i(c){const t=[...c.cells].sort((e,n)=>e[0]!==n[0]?e[0]-n[0]:e[1]!==n[1]?e[1]-n[1]:e[2]-n[2]),o=[],s=new Set;for(const e of t){const n=`${e[0]},${e[1]},${e[2]}`;s.has(n)||(s.add(n),o.push(e))}return{schema:"koos.shape",version:1,lattice:"fcc",cells:o}}function a(c){let t=0;for(let s=0;s<c.length;s++){const e=c.charCodeAt(s);t=(t<<5)-t+e,t=t&t}return Math.abs(t).toString(16).padStart(16,"0").repeat(4)}async function l(c){const t=JSON.stringify(c,Object.keys(c).sort());if(!crypto||!crypto.subtle)return console.warn("⚠️ Using fallback hash (non-secure). Access via HTTPS for production."),`dev:${a(t)}`;const s=new TextEncoder().encode(t),e=await crypto.subtle.digest("SHA-256",s);return`sha256:${Array.from(new Uint8Array(e)).map(r=>r.toString(16).padStart(2,"0")).join("")}`}export{i as canonicalizeShape,l as computeShapeId};
