function i(t){const o=[...t.cells].sort((e,n)=>e[0]!==n[0]?e[0]-n[0]:e[1]!==n[1]?e[1]-n[1]:e[2]-n[2]),r=[],s=new Set;for(const e of o){const n=`${e[0]},${e[1]},${e[2]}`;s.has(n)||(s.add(n),r.push(e))}return{schema:"koos.shape",version:1,lattice:"fcc",cells:r}}async function h(t){const o=JSON.stringify(t,Object.keys(t).sort()),s=new TextEncoder().encode(o),e=await crypto.subtle.digest("SHA-256",s);return`sha256:${Array.from(new Uint8Array(e)).map(c=>c.toString(16).padStart(2,"0")).join("")}`}export{i as canonicalizeShape,h as computeShapeId};
